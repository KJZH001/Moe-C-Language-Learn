#include <iostream>
using namespace std;

// 可以先尝试运行或者分析一下这段代码
// 这段代码看着可能会有些奇怪，但就是这样的格式
int main()
{
    int a=0,b=0;
    if((a>10) && (b=1))
        ;
    cout << b << "\n";
    if((a>10)||(b=5))
        ;
    cout << b << "\n";

    system("pause");
}

/*
这里你会看到最后有0和5输出到屏幕上，我们来一行行看下来

    // 这里我们定义并初始化了两个整数
    int a=0,b=0;
    // 这里我们使用了and，需要两个表达式都成立才返回true
    // a>10吗？不大于，第一个表达式已经为false，所以跳过了第二个表达式的执行
    // 注意哦，第二个表达式是 b赋值为1，而不是判断 b是否等于1
    if((a>10) && (b=1))
        //这行直接一个分号，表示这个if成立不做任何事情 
        ;
    // 打印b的值
    cout << b << "\n";
    // a>10吗？显然还是不可能大于的，但这里是or了
    // 程序执行的时候左边为false了，还要看右边是不是false
    // 所以这次b=5执行到了，b被赋值为5
    if((a>10)||(b=5))
        // 同理啦
        ;
    // 打印b的值
    cout << b << "\n";

在执行表达式的时候，其实也需要遵守一定的原则，这被称之为associativity
默认从左到右边，如果碰到逻辑轮算子，则看看这个逻辑运算子的条件
and如果左边为false了，那么右边就肯定不会执行到
or也同理，如果左边已经是true，那么也会忽略右边


*/

/*
cpp的运算符号优先级

类别 	运算符 	                             结合性 
后缀 	() [] -> . ++ - -  	                从左到右 
一元 	+ - ! ~ ++ - - (type)* & sizeof 	从右到左 
乘除 	* / % 	                            从左到右 
加减 	+ - 	                            从左到右 
移位 	<< >> 	                            从左到右 
关系 	< <= > >= 	                        从左到右 
相等 	== != 	                            从左到右 
位与 AND 	& 	                            从左到右 
位异或 XOR 	^ 	                            从左到右 
位或 OR 	| 	                            从左到右 
逻辑与 AND 	&& 	                            从左到右 
逻辑或 OR 	|| 	                            从左到右 
条件 	?: 	                                从右到左 
赋值 	= += -= *= /= %=>>= <<= &= ^= |= 	从右到左 
逗号 	, 	                                从左到右 

一般来说，你不必要去记这个东西，因为用到的时候去查就好
实在不行你多打两个括号又有什么关系呢？

除非，你是为了考试XD

refer:
https://learn.microsoft.com/zh-cn/cpp/cpp/cpp-built-in-operators-precedence-and-associativity?view=msvc-170
https://www.runoob.com/cplusplus/cpp-operators.html
*/